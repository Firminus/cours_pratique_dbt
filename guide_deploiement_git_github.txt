
# Guide : D√©ployer un projet local sur GitHub avec Git

## 1. Initialiser Git dans ton projet
Va dans ton dossier de projet et initialise Git :
```bash
cd ~/cours_pratique_dbt/formation_dbt
git init
```
üëâ Cela cr√©e un d√©p√¥t Git local dans ton projet.

---
## Verifier la liste des modifications ou dossiers
git status


## 2. Ajouter les fichiers √† Git
Ajoute tous les fichiers de ton projet au suivi de Git :
```bash
git add .
```
üëâ Le point `.` signifie "ajoute tout".

---

## 3. Faire un premier commit
Cr√©e un commit avec un message explicatif :
```bash
git commit -m "Premier commit : ajout du projet formation_dbt"
```
üëâ Le commit enregistre l‚Äô√©tat actuel des fichiers dans Git.

---

## 4. Ajouter le d√©p√¥t distant (GitHub)
Connecte ton projet local √† ton d√©p√¥t GitHub :
```bash
git remote add origin https://github.com/Firminus/cours_pratique_dbt.git
```
üëâ Ici, `origin` est le nom donn√© au d√©p√¥t GitHub.

---

## 5. V√©rifier que le d√©p√¥t distant est bien configur√©
```bash
git remote -v
```
üëâ Tu dois voir :
```
origin  https://github.com/Firminus/cours_pratique_dbt.git (fetch)
origin  https://github.com/Firminus/cours_pratique_dbt.git (push)
```

---

## 6. V√©rifier le nom de ta branche locale
```bash
git branch
```
üëâ R√©sultat possible :
- `* master` ‚Üí ta branche s‚Äôappelle **master**
- `* main` ‚Üí ta branche s‚Äôappelle **main**

---

## 7. Envoyer ton projet sur GitHub
Si ta branche est `master` :
```bash
git push -u origin master
```
Si ta branche est `main` :
```bash
git push -u origin main
```

üëâ Le `-u` permet d‚Äôassocier ta branche locale avec celle sur GitHub.  
Ensuite, tu pourras simplement faire `git push` pour envoyer tes changements.

---

## 8. Pour chaque nouvelle modification
√Ä chaque fois que tu modifies ton projet, fais :
```bash
git add .
git commit -m "Description des changements"
git push
```
üëâ Ainsi, tes modifications locales seront sauvegard√©es et envoy√©es sur GitHub.

---

üéâ F√©licitations, ton projet est maintenant d√©ploy√© sur GitHub !





A FAIRE ABSOULUMENT :

Solution

V√©rifie que ton d√©p√¥t existe bien :
üëâ https://github.com/Firminus/git-test

(s‚Äôil n‚Äôexiste pas, cr√©e-le sur GitHub avant de faire git push).

G√©n√©re un nouveau token avec droits complets :

Va dans Settings > Developer settings > Personal Access Tokens > Tokens (classic)

Clique Generate new token

Coche au minimum :

‚úÖ repo (pour lecture/√©criture sur tes d√©p√¥ts)

Copie le nouveau token.

Mets √† jour ton remote (si n√©cessaire, mais tu l‚Äôas d√©j√† bien en HTTPS) :

git remote set-url origin https://github.com/Firminus/git-test.git


Re-pousse avec ton nouveau token :

git push -u origin main


Et quand Git demande le password ‚Üí colle ton nouveau token. 

===========================================================
# 1. Cr√©er une nouvelle branche et se placer dessus
git checkout -b feature-login

# 2. Ajouter les fichiers modifi√©s √† l‚Äôindex
git add .

# 2bis. Cr√©er un commit avec un message clair
git commit -m "Ajout du formulaire de login"

# 3. Envoyer la branche vers GitHub/GitLab (si c'est la premi√®re fois : voir commande suivante)
git push origin feature-login

# 3bis. Premi√®re fois que tu pushes cette branche -> d√©finir la branche distante
git push --set-upstream origin feature-login

# 4. Aller sur GitHub/GitLab pour cr√©er une Pull Request (GitHub) ou Merge Request (GitLab)

# 5. Apr√®s revue et validation, fusionner la branche dans main (√† faire sur la plateforme)

# 6. Supprimer la branche localement une fois fusionn√©e
git branch -d feature-login

# 6bis. Nettoyer les r√©f√©rences de branches distantes supprim√©es
git fetch -p








